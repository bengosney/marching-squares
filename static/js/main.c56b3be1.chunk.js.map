{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["point","x","arguments","length","undefined","y","Object","classCallCheck","this","App","props","_this","_super","call","state","pixelSize","height","width","mouseX","mouseY","mouseEvent","effectMod","strength","strengthCur","mouseOver","cutoff","color","drawing","ctx","data","updateWindowDimensions","bind","assertThisInitialized","startts","getTS","noise","makeNoise3D","time","rows","Math","ceil","cols","mod","Array","parseFloat","toFixed","_this2","canvas","refs","getContext","rAF","requestAnimationFrame","updateAnimationState","window","addEventListener","rect","getBoundingClientRect","_window","innerWidth","innerHeight","realWidth","min","realHeight","setState","nextFrame","cancelAnimationFrame","removeEventListener","ts","clearFrame","drawDots","_this3","_this$state","_this$state2","clearRect","Date","getTime","value","r1","r2","x1","y1","x2","y2","sqrt","_this4","_this$state3","getValues","now","c","convertRange","round","val","_loop","_loop2","_v1","_v2","_v3","_v4","s","concat","line","p1","p2","beginPath","strokeStyle","moveTo","lineTo","stroke","v1","v2","v3","v4","a","b","d","_this5","_this$state4","react_default","createElement","className","class","htmlFor","type","max","onChange","e","target","id","name","ref","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c56b3be1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { makeNoise2D, makeNoise3D } from \"open-simplex-noise\";\nimport \"./App.css\";\n\nclass point {\n    constructor(x = null, y = null) {\n        this.x = x;\n        this.y = y;\n    }\n}\n\nconst lerp = (v0, v1, t) => {\n    const lerped = (1 - t) * v0 + t * v1;\n    console.log(v0, v1, t, lerped);\n    return lerp;\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            pixelSize: 10,\n            height: 500,\n            width: 150,\n            mouseX: -9999,\n            mouseY: -9999,\n            mouseEvent: 0,\n            effectMod: 2,\n            strength: 40,\n            strengthCur: 0,\n            mouseOver: false,\n            cutoff: 128,\n            color: '#ffffff',\n        };\n\n        this.drawing = false;\n        this.ctx = null;\n        this.data = [[]];\n\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n        this.startts = this.getTS();\n\n        this.noise = makeNoise3D(1);\n    }\n\n    getValues(width, height, time) {\n        const { pixelSize } = this.state;\n        const { noise } = this;\n\n        const rows = Math.ceil(height / pixelSize) + 1;\n        const cols = Math.ceil(width / pixelSize) + 1;\n\n        const mod = pixelSize / 100;\n\n        const data = new Array(cols);\n        for (let x = 0; x < cols; x++) {\n            data[x] = new Array(rows);\n            for (let y = 0; y < rows; y++) {\n                data[x][y] =parseFloat(noise(x * mod, y * mod, time)).toFixed(4);\n            }\n        }\n\n        return data;\n    }\n\n    componentDidMount() {\n        const canvas = this.refs.canvas;\n        this.canvas = canvas;\n        this.ctx = canvas.getContext(\"2d\");\n\n        this.rAF = requestAnimationFrame(() => this.updateAnimationState());\n        this.updateWindowDimensions();\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions() {\n        const rect = this.canvas.getBoundingClientRect();\n        const { innerWidth, innerHeight } = window;\n        const { width, height } = rect;\n        const realWidth = Math.min(width, innerWidth);\n        const realHeight = Math.min(height, innerHeight);\n\n        this.setState({ width: realWidth, height: realHeight });\n        this.nextFrame();\n    }\n\n    componentWillUnmount() {\n        cancelAnimationFrame(this.rAF);\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    updateAnimationState() {\n        this.ts = this.getTS();\n        this.clearFrame();\n\n        this.drawDots();\n\n        this.nextFrame();\n    }\n\n    nextFrame() {\n        const { width, height } = this.state;\n        this.rAF = requestAnimationFrame(() => this.updateAnimationState());\n    }\n\n    clearFrame() {\n        const { width, height } = this.state;\n        const { ctx } = this;\n\n        ctx.clearRect(0, 0, width, height);\n    }\n\n    getTS() {\n        const date = new Date();\n\n        return date.getTime();\n    }\n\n    convertRange(value, r1, r2) {\n        return ((value - r1[0]) * (r2[1] - r2[0])) / (r1[1] - r1[0]) + r2[0];\n    }\n\n    distance(x1, y1, x2, y2) {\n        const x = x1 - x2;\n        const y = y1 - y2;\n\n        return Math.sqrt(x * x + y * y);\n    }\n\n    scale(value, r1, r2) {\n        return ((value - r1[0]) * (r2[1] - r2[0])) / (r1[1] - r1[0]) + r2[0];\n    }\n\n    drawDots() {\n        const { width, height, pixelSize, cutoff, color } = this.state;\n        const { ctx } = this;\n        const ts = this.getTS() / 1000;\n\n        const data = this.getValues(width, height, Date.now() / 10000);\n\n        const c = this.convertRange(cutoff, [0, 255], [-1, 1]);\n        const round = (val) => {            \n            return val > c ? 1 : 0;\n        }\n\n        for (let x = 0; x < data.length - 1; x++) {\n            for (let y = 0; y < data[x].length - 1; y++) {\n                const _v1 = data[x    ][y    ];\n                const _v2 = data[x + 1][y    ];\n                const _v3 = data[x + 1][y + 1];\n                const _v4 = data[x    ][y + 1];\n                const s = `${round(_v1)}${round(_v2)}${round(_v3)}${round(_v4)}`;\n\n                const line = (p1, p2) => {\n                    ctx.beginPath();\n                    ctx.strokeStyle = `${color}`;\n                    ctx.moveTo(x * pixelSize + p1.x, y * pixelSize + p1.y);\n                    ctx.lineTo(x * pixelSize + p2.x, y * pixelSize + p2.y);\n                    ctx.stroke();\n                };\n\n                const v1 = this.convertRange(data[x    ][y    ], [-1, 1], [0, 1]);\n                const v2 = this.convertRange(data[x + 1][y    ], [-1, 1], [0, 1]);\n                const v3 = this.convertRange(data[x + 1][y + 1], [-1, 1], [0, 1]);\n                const v4 = this.convertRange(data[x    ][y + 1], [-1, 1], [0, 1]);\n\n                let amt;\n                let a = new point();\n                a.x = pixelSize * ((v1 + v2)  / 2);\n                a.y = 0;\n\n                let b = new point();\n                b.x = pixelSize;\n                b.y = pixelSize * ((v2 + v3) / 2);\n\n                let c = new point();\n                c.x = pixelSize * ((v3 + v4) / 2);\n                c.y = pixelSize;\n          \n                let d = new point();\n                d.x = 0;\n                d.y = pixelSize * ((v4 + v1) / 2);\n\n\n                \n                switch (s) {\n                    case \"1110\":\n                    case \"0001\":\n                        line(c, d);\n                        break;\n                    case \"1101\":\n                    case \"0010\":\n                        line(b, c);\n                        break;\n                    case \"1011\":\n                    case \"0100\":\n                        line(a, b);\n                        break;\n                    case \"0111\":\n                        line(d, a);\n                        break;\n                    case \"1000\":\n                        line(d, a);\n                        break;\n                    case \"1100\":\n                    case \"0011\":\n                        line(d, b);\n                        break;\n                    case \"1001\":\n                    case \"0110\":\n                        line(a, c);\n                        break;\n                    case \"1010\":\n                        if (((v1 + v2) / 2) > 0.5) {\n                            line(a, d);\n                            line(b, c);\n                        } else {\n                            line(a, b);\n                            line(c, d);\n                        }\n                        break;\n                    case \"0101\":\n                        line(a, b);\n                        line(c, d);\n                        break;\n                }\n            }\n        }\n    }\n\n    render() {\n        const { width, height, cutoff, color } = this.state;\n\n        return (\n            <div className={\"grid\"}>\n                <div class=\"ui\">\n                    <p>Controls</p>\n                    <div>\n                        <label htmlFor=\"height\" >Height</label>\n                        <input type=\"range\" min=\"0\" max=\"255\" value={cutoff} onChange={(e) => this.setState({cutoff: e.target.value})} className=\"slider\" id=\"height\" name=\"height\" />\n                    </div>\n                    <div>\n                        <label htmlFor=\"height\" >Color</label>\n                        <input type=\"color\" value={ color } onChange={(e) => this.setState({color: e.target.value})} id=\"color\" name=\"color\" />\n                    </div>\n                </div>\n                <div className={\"dots\"}>\n                    <canvas ref=\"canvas\"  width={width} height={height} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}