{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","_super","call","state","pixelSize","height","width","mouseX","mouseY","mouseEvent","effectMod","strength","strengthCur","mouseOver","data","drawing","ctx","updateWindowDimensions","bind","assertThisInitialized","startts","getTS","noise2D","makeNoise2D","Date","now","rows","Math","ceil","cols","Array","x","y","convertRange","_this2","canvas","refs","getContext","rAF","requestAnimationFrame","updateAnimationState","window","addEventListener","rect","getBoundingClientRect","_window","innerWidth","innerHeight","realWidth","min","realHeight","getValues","setState","nextFrame","cancelAnimationFrame","removeEventListener","ts","clearFrame","drawDots","_this3","_this$state","clearRect","getTime","value","r1","r2","x1","y1","x2","y2","sqrt","_this$state2","_loop","_loop2","v1","round","v2","v3","v4","vString","concat","line","fx","fy","tx","ty","beginPath","strokeStyle","moveTo","lineTo","stroke","console","log","length","_this$state3","react_default","a","createElement","className","ref","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.62a94660.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { makeNoise2D } from \"open-simplex-noise\";\nimport \"./App.css\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            pixelSize: 10,\n            height: 500,\n            width: 150,\n            mouseX: -9999,\n            mouseY: -9999,\n            mouseEvent: 0,\n            effectMod: 2,\n            strength: 40,\n            strengthCur: 0,\n            mouseOver: false,\n            data: [[]],\n        };\n\n        this.drawing = false;\n        this.ctx = null;\n\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n        this.startts = this.getTS();\n\n        this.noise2D = makeNoise2D(Date.now());\n    }\n\n    getValues(width, height) {\n        const { pixelSize } = this.state;\n        const { noise2D } = this;\n\n        const rows = Math.ceil(height / pixelSize) + 1;\n        const cols = Math.ceil(width / pixelSize) + 1;\n\n        const mod = 0.1;\n\n        const data = new Array(cols);\n        for (let x = 0; x < cols; x++) {\n            data[x] = new Array(rows);\n            for (let y = 0; y < rows; y++) {\n                data[x][y] = this.convertRange(noise2D(x * mod, y * mod), [-1, 1], [0, 1]);\n            }\n        }\n\n        return data;\n    }\n\n    componentDidMount() {\n        const canvas = this.refs.canvas;\n        this.canvas = canvas;\n        this.ctx = canvas.getContext(\"2d\");\n\n        this.rAF = requestAnimationFrame(() => this.updateAnimationState());\n        this.updateWindowDimensions();\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions() {\n        const rect = this.canvas.getBoundingClientRect();\n        const { innerWidth, innerHeight } = window;\n        const { width, height } = rect;\n        const realWidth = Math.min(width, innerWidth);\n        const realHeight = Math.min(height, innerHeight);\n\n        const data = this.getValues(realWidth, realHeight);\n\n        this.setState({ width: realWidth, height: realHeight, data: data });\n        this.nextFrame();\n    }\n\n    componentWillUnmount() {\n        cancelAnimationFrame(this.rAF);\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    updateAnimationState() {\n        this.ts = this.getTS();\n        this.clearFrame();\n\n        this.drawDots();\n\n        //this.nextFrame();\n    }\n\n    nextFrame() {\n        this.rAF = requestAnimationFrame(() => this.updateAnimationState());\n    }\n\n    clearFrame() {\n        const { width, height } = this.state;\n        const { ctx } = this;\n\n        ctx.clearRect(0, 0, width, height);\n    }\n\n    getTS() {\n        const date = new Date();\n\n        return date.getTime();\n    }\n\n    convertRange(value, r1, r2) {\n        return ((value - r1[0]) * (r2[1] - r2[0])) / (r1[1] - r1[0]) + r2[0];\n    }\n\n    distance(x1, y1, x2, y2) {\n        const x = x1 - x2;\n        const y = y1 - y2;\n\n        return Math.sqrt(x * x + y * y);\n    }\n\n    scale(value, r1, r2) {\n        return ((value - r1[0]) * (r2[1] - r2[0])) / (r1[1] - r1[0]) + r2[0];\n    }\n\n    drawDots() {\n        const { width, height, data, pixelSize } = this.state;\n        const { ctx } = this;\n        const ts = this.getTS() / 1000;\n\n        /*\n        for (let x = 0; x < data.length; x++) {\n            for (let y = 0; y < data[x].length; y++) {\n\n                const v = data[x][y];\n\n                const r = v * 255;\n                const g = v * 255;\n                const b = v * 255;\n                const a = 0.8;\n\n                const mod = pixelSize * .5;\n\n                ctx.beginPath();\n                ctx.fillStyle = `rgba(${r}, ${g}, ${b}, ${a})`;\n                ctx.fillRect((x * pixelSize) + mod, (y * pixelSize) + mod, pixelSize - mod, pixelSize - mod );\n            }\n        }\n        //*/\n\n        for (let x = 0; x < data.length - 1; x++) {\n            for (let y = 0; y < data[x].length - 1; y++) {\n                const v1 = Math.round(data[x][y]);\n                const v2 = Math.round(data[x + 1][y]);\n                const v3 = Math.round(data[x + 1][y + 1]);\n                const v4 = Math.round(data[x][y + 1]);\n                const vString = `${v1}${v2}${v3}${v4}`;\n\n                const line = (fx, fy, tx, ty) => {\n                    ctx.beginPath();\n                    ctx.strokeStyle = `rgba(255, 255, 255, 1)`;\n                    ctx.moveTo(x * pixelSize + fx, y * pixelSize + fy);\n                    ctx.lineTo(x * pixelSize + tx, y * pixelSize + ty);\n                    ctx.stroke();\n                };\n\n                switch (vString) {\n                    case \"1110\":\n                    case \"0001\":\n                        line(0, pixelSize / 2, pixelSize / 2, pixelSize);\n                        break;\n                    case \"1101\":\n                    case \"0010\":\n                        line(pixelSize / 2, pixelSize, pixelSize, pixelSize / 2);\n                        break;\n                    case \"1011\":\n                    case \"0100\":\n                        line(pixelSize / 2, 0, pixelSize, pixelSize / 2);\n                        break;\n                    case \"0111\":\n                    case \"1000\":\n                        line(0, pixelSize / 2, pixelSize / 2, 0);\n                        break;\n                    case \"1100\":\n                    case \"0011\":\n                        line(0, pixelSize / 2, pixelSize, pixelSize / 2);\n                        break;\n                    case \"1001\":\n                    case \"0110\":\n                        line(pixelSize / 2, 0, pixelSize / 2, pixelSize);\n                        break;\n                    case \"1010\":\n                        line(0, pixelSize / 2, pixelSize / 2, 0);\n                        line(pixelSize / 2, pixelSize, pixelSize, pixelSize / 2);\n                        break;\n                    case \"0101\":\n                        line(0, pixelSize / 2, pixelSize / 2, pixelSize);\n                        line(pixelSize / 2, 0, pixelSize, pixelSize / 2);\n                        break;\n                    case \"1111\":\n                    case \"0000\":\n                        break;\n                    default:\n                        console.log(\"missed\", vString);\n                        break;\n                }\n\n                if (y > 1) {\n                    //break;\n                }\n            }\n            if (x > 0) {\n                //break;\n            }\n        }\n    }\n\n    render() {\n        const { width, height } = this.state;\n\n        return (\n            <div className={\"grid\"}>\n                <div className={\"dots\"}>\n                    <canvas ref=\"canvas\" width={width} height={height} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}