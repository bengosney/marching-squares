{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["point","x","arguments","length","undefined","y","Object","classCallCheck","this","App","props","_this","_super","call","state","pixelSize","height","width","mouseX","mouseY","mouseEvent","effectMod","strength","strengthCur","mouseOver","drawing","ctx","data","updateWindowDimensions","bind","assertThisInitialized","startts","getTS","noise","makeNoise3D","time","rows","Math","ceil","cols","mod","Array","parseFloat","toFixed","_this2","canvas","refs","getContext","rAF","requestAnimationFrame","updateAnimationState","window","addEventListener","rect","getBoundingClientRect","_window","innerWidth","innerHeight","realWidth","min","realHeight","setState","nextFrame","cancelAnimationFrame","removeEventListener","ts","clearFrame","drawDots","_this3","_this$state","_this$state2","clearRect","Date","getTime","value","r1","r2","x1","y1","x2","y2","sqrt","_this4","_this$state3","getValues","now","_loop","_loop2","_v1","_v2","_v3","_v4","s","concat","line","p1","p2","colour","beginPath","strokeStyle","moveTo","lineTo","stroke","v1","convertRange","v2","v3","v4","a","b","c","d","_this$state4","react_default","createElement","className","ref","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.14deebc9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { makeNoise2D, makeNoise3D } from \"open-simplex-noise\";\nimport \"./App.css\";\n\nclass point {\n    constructor(x = null, y = null) {\n        this.x = x;\n        this.y = y;\n    }\n}\n\nconst lerp = (v0, v1, t) => {\n    const lerped = (1 - t) * v0 + t * v1;\n    console.log(v0, v1, t, lerped);\n    return lerp;\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            pixelSize: 10,\n            height: 500,\n            width: 150,\n            mouseX: -9999,\n            mouseY: -9999,\n            mouseEvent: 0,\n            effectMod: 2,\n            strength: 40,\n            strengthCur: 0,\n            mouseOver: false,\n        };\n\n        this.drawing = false;\n        this.ctx = null;\n        this.data = [[]];\n\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n        this.startts = this.getTS();\n\n        this.noise = makeNoise3D(1);\n    }\n\n    getValues(width, height, time) {\n        const { pixelSize } = this.state;\n        const { noise } = this;\n\n        const rows = Math.ceil(height / pixelSize) + 1;\n        const cols = Math.ceil(width / pixelSize) + 1;\n\n        const mod = pixelSize / 100;\n\n        const data = new Array(cols);\n        for (let x = 0; x < cols; x++) {\n            data[x] = new Array(rows);\n            for (let y = 0; y < rows; y++) {\n                //data[x][y] = this.convertRange(noise(x * mod, y * mod, time),[-1, 1], [0, 1]);\n                data[x][y] =parseFloat(noise(x * mod, y * mod, time)).toFixed(4);\n                //data[x][y] = noise(x * mod, y * mod, time);\n                //data[x][y] = Math.random();\n            }\n        }\n\n        return data;\n    }\n\n    componentDidMount() {\n        const canvas = this.refs.canvas;\n        this.canvas = canvas;\n        this.ctx = canvas.getContext(\"2d\");\n\n        this.rAF = requestAnimationFrame(() => this.updateAnimationState());\n        this.updateWindowDimensions();\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions() {\n        const rect = this.canvas.getBoundingClientRect();\n        const { innerWidth, innerHeight } = window;\n        const { width, height } = rect;\n        const realWidth = Math.min(width, innerWidth);\n        const realHeight = Math.min(height, innerHeight);\n\n        this.setState({ width: realWidth, height: realHeight });\n        this.nextFrame();\n    }\n\n    componentWillUnmount() {\n        cancelAnimationFrame(this.rAF);\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    updateAnimationState() {\n        this.ts = this.getTS();\n        this.clearFrame();\n\n        this.drawDots();\n\n        this.nextFrame();\n    }\n\n    nextFrame() {\n        const { width, height } = this.state;\n        this.rAF = requestAnimationFrame(() => this.updateAnimationState());\n    }\n\n    clearFrame() {\n        const { width, height } = this.state;\n        const { ctx } = this;\n\n        ctx.clearRect(0, 0, width, height);\n    }\n\n    getTS() {\n        const date = new Date();\n\n        return date.getTime();\n    }\n\n    convertRange(value, r1, r2) {\n        return ((value - r1[0]) * (r2[1] - r2[0])) / (r1[1] - r1[0]) + r2[0];\n    }\n\n    distance(x1, y1, x2, y2) {\n        const x = x1 - x2;\n        const y = y1 - y2;\n\n        return Math.sqrt(x * x + y * y);\n    }\n\n    scale(value, r1, r2) {\n        return ((value - r1[0]) * (r2[1] - r2[0])) / (r1[1] - r1[0]) + r2[0];\n    }\n\n    drawDots() {\n        const { width, height, pixelSize } = this.state;\n        const { ctx } = this;\n        const ts = this.getTS() / 1000;\n\n        const data = this.getValues(width, height, Date.now() / 10000);\n\n        const halfPixel = pixelSize / 2;\n        /*\n        for (let x = 0; x < data.length; x++) {\n            for (let y = 0; y < data[x].length; y++) {\n                const v = this.convertRange(data[x][y], [-1, 1], [0, 1]);\n\n                const r = v * 255;\n                const g = v * 255;\n                const b = v * 255;\n                const a = 0.5;\n\n                const mod = 0; //pixelSize * 0.1;\n                const s = pixelSize;\n                const hs = 0; //s / 1;\n\n                ctx.beginPath();\n                ctx.fillStyle = `rgba(${r}, ${g}, ${b}, ${a})`;\n                ctx.fillRect(x * pixelSize, y * pixelSize, pixelSize, pixelSize);\n            }\n        }\n        //*/\n\n        /*\n        for (let x = 0; x < data.length - 1; x++) {\n            for (let y = 0; y < data[x].length - 1; y++) {\n                const v1 = Math.ceil(data[x][y]);\n                const v2 = Math.ceil(data[x + 1][y]);\n                const v3 = Math.ceil(data[x + 1][y + 1]);\n                const v4 = Math.ceil(data[x][y + 1]);\n                const vString = `${v1}${v2}${v3}${v4}`;\n\n                const line = (fx, fy, tx, ty) => {\n                    ctx.beginPath();\n                    ctx.strokeStyle = `rgba(255, 255, 255, 1)`;\n                    ctx.moveTo(x * pixelSize + fx, y * pixelSize + fy);\n                    ctx.lineTo(x * pixelSize + tx, y * pixelSize + ty);\n                    ctx.stroke();\n\n                    ctx.beginPath();\n                    ctx.fillStyle = `rgba(255, 255, 255, 1)`;\n                    ctx.fillRect(x * pixelSize + fx - 2, y * pixelSize + fy - 2, 4, 4);\n                    ctx.fillRect(x * pixelSize + tx - 2, y * pixelSize + ty - 2, 4, 4);\n                };\n\n                switch (vString) {\n                    case \"1110\":\n                    case \"0001\":\n                        line(0, halfPixel, halfPixel, pixelSize);\n                        break;\n                    case \"1101\":\n                    case \"0010\":\n                        line(halfPixel, pixelSize, pixelSize, halfPixel);\n                        break;\n                    case \"1011\":\n                    case \"0100\":\n                        line(halfPixel, 0, pixelSize, halfPixel);\n                        break;\n                    case \"0111\":\n                    case \"1000\":\n                        line(0, halfPixel, halfPixel, 0);\n                        break;\n                    case \"1100\":\n                    case \"0011\":\n                        line(0, halfPixel, pixelSize, halfPixel);\n                        break;\n                    case \"1001\":\n                    case \"0110\":\n                        line(halfPixel, 0, halfPixel, pixelSize);\n                        break;\n                    case \"1010\":\n                        line(0, halfPixel, halfPixel, 0);\n                        line(halfPixel, pixelSize, pixelSize, halfPixel);\n                        break;\n                    case \"0101\":\n                        line(0, halfPixel, halfPixel, pixelSize);\n                        line(halfPixel, 0, pixelSize, halfPixel);\n                        break;\n                    case \"1111\":\n                    case \"0000\":\n                        break;\n                    default:\n                        console.log(\"missed\", vString);\n                        break;\n                }\n            }\n        }\n        //*/\n\n        //*\n        for (let x = 0; x < data.length - 1; x++) {\n            for (let y = 0; y < data[x].length - 1; y++) {\n                const _v1 = data[x    ][y    ];\n                const _v2 = data[x + 1][y    ];\n                const _v3 = data[x + 1][y + 1];\n                const _v4 = data[x    ][y + 1];\n                const s = `${Math.ceil(_v1)}${Math.ceil(_v2)}${Math.ceil(_v3)}${Math.ceil(_v4)}`;\n\n                const line = (p1, p2, colour = false) => {\n                    ctx.beginPath();\n                    if (!colour) {\n                        ctx.strokeStyle = `rgba(0, 255, 0, 1)`;\n                    } else {\n                        ctx.strokeStyle = `${colour}`;\n                    }\n                    ctx.moveTo(x * pixelSize + p1.x, y * pixelSize + p1.y);\n                    ctx.lineTo(x * pixelSize + p2.x, y * pixelSize + p2.y);\n                    ctx.stroke();\n                };\n\n                const v1 = this.convertRange(data[x    ][y    ], [-1, 1], [0, 1]);\n                const v2 = this.convertRange(data[x + 1][y    ], [-1, 1], [0, 1]);\n                const v3 = this.convertRange(data[x + 1][y + 1], [-1, 1], [0, 1]);\n                const v4 = this.convertRange(data[x    ][y + 1], [-1, 1], [0, 1]);\n\n                let amt;\n                let a = new point();\n                a.x = pixelSize * ((v1 + v2)  / 2);\n                a.y = 0;\n\n                let b = new point();\n                b.x = pixelSize;\n                b.y = pixelSize * ((v2 + v3) / 2);\n\n                let c = new point();\n                c.x = pixelSize * ((v3 + v4) / 2);\n                c.y = pixelSize;\n          \n                let d = new point();\n                d.x = 0;\n                d.y = pixelSize * ((v4 + v1) / 2);\n\n\n                \n                switch (s) {\n                    case \"1110\":\n                    case \"0001\":\n                        line(c, d);\n                        break;\n                    case \"1101\":\n                    case \"0010\":\n                        line(b, c);\n                        break;\n                    case \"1011\":\n                    case \"0100\":\n                        line(a, b);\n                        break;\n                    case \"0111\":\n                        line(d, a);\n                        break;\n                    case \"1000\":\n                        line(d, a);\n                        break;\n                    case \"1100\":\n                    case \"0011\":\n                        line(d, b);\n                        break;\n                    case \"1001\":\n                    case \"0110\":\n                        line(a, c);\n                        break;\n                    case \"1010\":\n                        if (((v1 + v2) / 2) > 0.5) {\n                            line(a, d);\n                            line(b, c);\n                        } else {\n                            line(a, b);\n                            line(c, d);\n                        }\n                        break;\n                    case \"0101\":\n                        line(a, b);\n                        line(c, d);\n                        break;\n                }\n            }\n        }\n        //*/\n\n        /*\n        for (let x = 0; x < data.length - 1; x++) {\n            for (let y = 0; y < data[x].length - 1; y++) {\n                const v1 = data[x    ][y    ];\n                const v2 = data[x + 1][y    ];\n                const v3 = data[x + 1][y + 1];\n                const v4 = data[x    ][y + 1];\n\n                const line = (fx, fy, tx, ty, colour = false) => {\n                    ctx.beginPath();\n                    if (colour) {\n                        ctx.strokeStyle = colour;\n                    } else {\n                        ctx.strokeStyle = `rgba(255, 255, 255, 1)`;\n                    }\n                    ctx.moveTo((x * pixelSize) + fx, (y * pixelSize) + fy);\n                    ctx.lineTo((x * pixelSize) + tx, (y * pixelSize) + ty);\n                    ctx.stroke();\n                };\n\n                const s = `${Math.round(v1)}${Math.round(v2)}${Math.round(v3)}${Math.round(v4)}`;\n                //const s = `${Math.ceil(data[x][y])}${Math.ceil(data[x + 1][y])}${Math.ceil(data[x + 1][y + 1])}${Math.ceil(data[x][y + 1])}`;\n                const pixelMod = pixelSize;\n                switch (s) {\n                    case \"1110\":\n                        line(0, lerp(0, pixelSize, v1), lerp(0, pixelSize, v3), pixelSize);\n                        break;\n                    case \"0001\":\n                        line(0, lerp(0, pixelSize, v4), lerp(0, pixelSize, v4), pixelSize);\n                        break;\n                    case \"1101\":\n                        line(lerp(0, pixelSize, v4), pixelSize, pixelSize, lerp(0, pixelSize, v2));\n                        break;\n                    case \"0010\":\n                        line(lerp(0, pixelSize, v3), pixelSize, pixelSize, lerp(0, pixelSize, v3)); \n                        break;\n                    case \"1011\":\n                        line(lerp(0, pixelSize, v1), 0, pixelSize, lerp(0, pixelSize, v3));\n                        break;\n                    case \"0100\":\n                        line(lerp(0, pixelSize, v2), 0, pixelSize, lerp(0, pixelSize, v2));\n                        break;\n                    case \"0111\":\n                        line(0, lerp(0, pixelSize, v4), lerp(0, pixelSize, v2), 0);\n                        break;\n                    case \"1000\":\n                        line(0, lerp(0, pixelSize, v1), lerp(0, pixelSize, v1), 0);\n                        break;\n                    case \"1100\":\n                        line(0, lerp(0, pixelSize, v1), pixelSize, lerp(0, pixelSize, v2));\n                        break;\n                    case \"0011\":\n                        line(0, lerp(0, pixelSize, v4), pixelSize, lerp(0, pixelSize, v3));\n                        break;\n                    case \"1001\":\n                        line(lerp(0, pixelSize, v1), 0, lerp(0, pixelSize, v4), pixelSize);\n                        break;\n                    case \"0110\":\n                        line(lerp(0, pixelSize, v2), 0, lerp(0, pixelSize, v3), pixelSize);\n                        break;\n                    case \"1010\":\n                        line(0, lerp(0, pixelSize, v1), lerp(0, pixelSize, v1), 0);\n                        line(lerp(0, pixelSize, v3), pixelSize, pixelSize, lerp(0, pixelSize, v3));\n                        break;\n                    case \"0101\":\n                        line(0, lerp(0, pixelSize, v4), lerp(0, pixelSize, v4), pixelSize);\n                        line(lerp(0, pixelSize, v2), 0, pixelSize, lerp(0, pixelSize, v2));\n                        break;\n                }\n            }\n        }\n        //*/\n    }\n\n    render() {\n        const { width, height } = this.state;\n\n        return (\n            <div className={\"grid\"}>\n                <div className={\"dots\"}>\n                    <canvas ref=\"canvas\" width={width} height={height} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}