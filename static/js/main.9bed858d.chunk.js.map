{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["point","x","arguments","length","undefined","y","Object","classCallCheck","this","App","props","_this","_super","call","state","pixelSize","height","width","cutoff","color","speed","drawing","ctx","data","updateWindowDimensions","bind","assertThisInitialized","startts","getTS","noise","makeNoise3D","time","rows","Math","ceil","cols","mod","Array","parseFloat","toFixed","_this2","canvas","refs","getContext","rAF","requestAnimationFrame","updateAnimationState","window","addEventListener","_window","innerWidth","innerHeight","setState","cancelAnimationFrame","removeEventListener","ts","clearFrame","drawSceen","nextFrame","_this3","_this$state","clearRect","Date","getTime","value","r1","r2","x1","y1","x2","y2","sqrt","_this4","_this$state2","getValues","c","convertRange","round","val","_loop","_loop2","_v1","_v2","_v3","_v4","s","concat","line","p1","p2","beginPath","strokeStyle","moveTo","lineTo","stroke","v1","v2","v3","v4","a","b","d","_this5","_this$state3","react_default","createElement","className","class","htmlFor","type","min","max","onChange","e","target","id","name","onClick","ref","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9bed858d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { makeNoise3D } from \"open-simplex-noise\";\nimport \"./App.css\";\n\nclass point {\n    constructor(x = null, y = null) {\n        this.x = x;\n        this.y = y;\n    }\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            pixelSize: 10,\n            height: 500,\n            width: 150,\n            cutoff: 128,\n            color: '#ffffff',\n            speed: 10000,\n        };\n\n        this.drawing = false;\n        this.ctx = null;\n        this.data = [[]];\n\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n        this.startts = this.getTS();\n\n        this.noise = makeNoise3D(1);\n    }\n\n    getValues(width, height, time) {\n        const { pixelSize } = this.state;\n        const { noise } = this;\n\n        const rows = Math.ceil(height / pixelSize) + 1;\n        const cols = Math.ceil(width / pixelSize) + 1;\n\n        const mod = pixelSize / 100;\n\n        const data = new Array(cols);\n        for (let x = 0; x < cols; x++) {\n            data[x] = new Array(rows);\n            for (let y = 0; y < rows; y++) {\n                data[x][y] =parseFloat(noise(x * mod, y * mod, time)).toFixed(4);\n            }\n        }\n\n        return data;\n    }\n\n    componentDidMount() {\n        const canvas = this.refs.canvas;\n        this.canvas = canvas;\n        this.ctx = canvas.getContext(\"2d\");\n\n        this.rAF = requestAnimationFrame(() => this.updateAnimationState());\n        this.updateWindowDimensions();\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions() {\n        const { innerWidth, innerHeight } = window;\n\n        this.setState({ width: innerWidth, height: innerHeight });\n    }\n\n    componentWillUnmount() {\n        cancelAnimationFrame(this.rAF);\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    updateAnimationState() {\n        this.ts = this.getTS();\n        this.clearFrame();\n\n        this.drawSceen();\n\n        this.nextFrame();\n    }\n\n    nextFrame() {\n        this.rAF = requestAnimationFrame(() => this.updateAnimationState());\n    }\n\n    clearFrame() {\n        const { width, height } = this.state;\n        const { ctx } = this;\n\n        ctx.clearRect(0, 0, width, height);\n    }\n\n    getTS() {\n        const date = new Date();\n\n        return date.getTime();\n    }\n\n    convertRange(value, r1, r2) {\n        return ((value - r1[0]) * (r2[1] - r2[0])) / (r1[1] - r1[0]) + r2[0];\n    }\n\n    distance(x1, y1, x2, y2) {\n        const x = x1 - x2;\n        const y = y1 - y2;\n\n        return Math.sqrt(x * x + y * y);\n    }\n\n    scale(value, r1, r2) {\n        return ((value - r1[0]) * (r2[1] - r2[0])) / (r1[1] - r1[0]) + r2[0];\n    }\n\n    drawSceen() {\n        const { width, height, pixelSize, cutoff, color, speed } = this.state;\n        const { ctx } = this;\n        const ts = this.getTS() / speed;\n\n        const data = this.getValues(width, height, ts);\n\n        const c = this.convertRange(cutoff, [0, 255], [-1, 1]);\n        const round = (val) => {            \n            return val > c ? 1 : 0;\n        }\n\n        for (let x = 0; x < data.length - 1; x++) {\n            for (let y = 0; y < data[x].length - 1; y++) {\n                const _v1 = data[x    ][y    ];\n                const _v2 = data[x + 1][y    ];\n                const _v3 = data[x + 1][y + 1];\n                const _v4 = data[x    ][y + 1];\n                const s = `${round(_v1)}${round(_v2)}${round(_v3)}${round(_v4)}`;\n\n                const line = (p1, p2) => {\n                    ctx.beginPath();\n                    ctx.strokeStyle = `${color}`;\n                    ctx.moveTo(x * pixelSize + p1.x, y * pixelSize + p1.y);\n                    ctx.lineTo(x * pixelSize + p2.x, y * pixelSize + p2.y);\n                    ctx.stroke();\n                };\n\n                const v1 = this.convertRange(data[x    ][y    ], [-1, 1], [0, 1]);\n                const v2 = this.convertRange(data[x + 1][y    ], [-1, 1], [0, 1]);\n                const v3 = this.convertRange(data[x + 1][y + 1], [-1, 1], [0, 1]);\n                const v4 = this.convertRange(data[x    ][y + 1], [-1, 1], [0, 1]);\n\n                let a = new point();\n                a.x = pixelSize * ((v1 + v2)  / 2);\n                a.y = 0;\n\n                let b = new point();\n                b.x = pixelSize;\n                b.y = pixelSize * ((v2 + v3) / 2);\n\n                let c = new point();\n                c.x = pixelSize * ((v3 + v4) / 2);\n                c.y = pixelSize;\n          \n                let d = new point();\n                d.x = 0;\n                d.y = pixelSize * ((v4 + v1) / 2);\n\n\n                \n                switch (s) {\n                    case \"1110\":\n                    case \"0001\":\n                        line(c, d);\n                        break;\n                    case \"1101\":\n                    case \"0010\":\n                        line(b, c);\n                        break;\n                    case \"1011\":\n                    case \"0100\":\n                        line(a, b);\n                        break;\n                    case \"0111\":\n                        line(d, a);\n                        break;\n                    case \"1000\":\n                        line(d, a);\n                        break;\n                    case \"1100\":\n                    case \"0011\":\n                        line(d, b);\n                        break;\n                    case \"1001\":\n                    case \"0110\":\n                        line(a, c);\n                        break;\n                    case \"1010\":\n                        if (((v1 + v2) / 2) > 0.5) {\n                            line(a, d);\n                            line(b, c);\n                        } else {\n                            line(a, b);\n                            line(c, d);\n                        }\n                        break;\n                    case \"0101\":\n                        line(a, b);\n                        line(c, d);\n                        break;\n                    default:\n                        // do nothing\n                }\n            }\n        }\n    }\n\n    render() {\n        const { width, height, cutoff, color, speed } = this.state;\n\n        return (\n            <div className={\"grid\"}>\n                <div class=\"ui\">\n                    <p>Controls</p>\n                    <div>\n                        <label htmlFor=\"height\" >Height</label>\n                        <input type=\"range\" min=\"0\" max=\"255\" value={cutoff} onChange={(e) => this.setState({cutoff: e.target.value})} className=\"slider\" id=\"height\" name=\"height\" />\n                    </div>\n                    <div>\n                        <label htmlFor=\"speed\" >Speed</label>\n                        <button type=\"button\" onClick={(e) => this.setState({speed: 1000})}>Fast</button>\n                        <button type=\"button\" onClick={(e) => this.setState({speed: 10000})}>Normal</button>\n                        <button type=\"button\" onClick={(e) => this.setState({speed: 50000})}>Slow</button>\n                    </div>\n                    <div>\n                        <label htmlFor=\"height\" >Color</label>\n                        <input type=\"color\" value={ color } onChange={(e) => this.setState({color: e.target.value})} id=\"color\" name=\"color\" />\n                    </div>\n                </div>\n                <div className={\"dots\"}>\n                    <canvas ref=\"canvas\"  width={width} height={height} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}